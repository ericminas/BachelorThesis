 ---------- commands ----------
 	1) (at the formatFuzzer dir) make ogg-fuzzer
	2) ./ogg-fuzzer fuzz basecase.ogg
	
 ---------- code ----------
local uint MAXPAGES = 100;
local uint currpage = 0;
local ubyte maxArrayLength = 100; // if arrays are longer than this, the generator just quits!

typedef struct {
    CHAR    CapturePattern[4];  // must be 'OGGS'  
    BYTE    Version;            // must be 0
    BYTE    HeaderType;         // 2 -> not first | 1 -> first | 4 -> last
    QUAD    GranulePosition;
    DWORD   BitstreamSerial;
    DWORD   PageSequenceNumber = {currpage++};
    DWORD   Checksum;
    UBYTE   PageSegments <min=1, max=100>;

    Printf( "LENGTH: %d\n", PageSegments);
    // generate the array of segment lenghts
    UBYTE   SegmentLen[PageSegments];
    

    local uint i;
    // the segments themselves
    for (i = 0; i < PageSegments; i++) {
            // generate an array called data with the length that was defined by the pageSegments array at the correct position 
        struct {
            BYTE Data[SegmentLen[i]] <bgcolor=cLtGray>;
        } Segment;
    }
} PAGE;


LittleEndian(); 


while( !FEof() )
{
  
    if (MAXPAGES < currpage) 
    {
        Printf("Max Pages of %d reached!\n", MAXPAGES);
        return 0;
    }

    local int evilBit = SetEvilBit(false);
    PAGE page <bgcolor=cLtBlue>;
    SetEvilBit(evilBit);
    
    // Check for valid header -> mining magic values
    if ( page.CapturePattern != "OggS" || page.Version != 0)
    {
        Warning( "File is not a valid ogg file. Template stopped." );
        return -1;
    }

    // check for valid HeaderType -> mining magic values
    if (( currpage == 0 && (page.HeaderType != 1 || page.HeaderType != 2)) 
        || (currpage == MAXPAGES && page.HeaderType != 4)
        || (currpage != 0 && page.HeaderType != 2)
        ) {
        Warning( "Headertype is not matching" );
        return -1;
    }

  currpage++;
}
 
 ---------- console-output ---------- 
 1)
 - 
 |  ./ffcompile templates/ogg.bt ogg.cpp
 | Finished creating cpp generator.
 | 
 | Mined interesting values:
 | 
 | CapturePattern: ['"OggS"']
 | HeaderType: ['1', '2', '4', '2']
 | Version: ['0']
 | 
 | File stat functions found:
 | 
 | FEof
 | 
 | g++ -std=c++17 -DHAVE_CONFIG_H -I.     -g -O3 -Wall -MT ogg.o -MD -MP -MF .deps/ogg.Tpo -c -o ogg.o ogg.cpp
 | mv -f .deps/ogg.Tpo .deps/ogg.Po
 | g++ -std=c++17  -g -O3 -Wall   -o ogg-fuzzer ogg.o fuzzer.o -lz
 | rm ogg.o
 â€“
 
 2)
 -
 | LENGTH: 59
 | Error: Array length too large
 | ogg-fuzzer: basecase.ogg failed
 -
	
 ---------- generated file behaviour ----------
 stops while generating the segment 2, with length: 165 (previous max. length: 125 @ Segment 0)  

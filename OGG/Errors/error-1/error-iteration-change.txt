 ---------- commands ----------
 	1) (at the formatFuzzer dir) make ogg-fuzzer
	2) ./ogg-fuzzer fuzz iterationchange.ogg
	
 ---------- code ----------

 ocal uint MAXPAGES = 100;
local uint currpage = 0;
local ubyte maxArrayLength = 100; // if arrays are longer than this, the generator just quits!

typedef struct {
    CHAR    CapturePattern[4];  // must be 'OGGS'  
    BYTE    Version;            // must be 0
    BYTE    HeaderType;         // 2 -> not first | 1 -> first | 4 -> last
    QUAD    GranulePosition;
    DWORD   BitstreamSerial;
    DWORD   PageSequenceNumber = {currpage++};
    DWORD   Checksum;
    UBYTE   PageSegments <min=1, max=100>;

    Printf( "LENGTH: %d\n", PageSegments);
    // generate the array of segment lenghts
    UBYTE   SegmentLen[PageSegments];
    
    local uint i;
    // try to replace the numbers that are too big
    for (i = 0; i < PageSegments; i++) {
        if ( SegmentLen[i] > maxArrayLength) {
            Printf("Segment %d too long (%d)\n", i, SegmentLen[i]);
            SegmentLen[i] = 10; 
            //SegmentLen[i] = {2,5,10,15,20,25,30,35,40,45,50}; 
        }
    }

    // the segments themselves
    for (i = 0; i < PageSegments; i++) {
            // generate an array called data with the length that was defined by the pageSegments array at the correct position 
        struct {
            BYTE Data[SegmentLen[i]] <bgcolor=cLtGray>;
        } Segment;
    }
} PAGE;


LittleEndian(); 


while( !FEof() )
{
  
    if (MAXPAGES < currpage) 
    {
        Printf("Max Pages of %d reached!\n", MAXPAGES);
        return 0;
    }

    local int evilBit = SetEvilBit(false);
    PAGE page <bgcolor=cLtBlue>;
    SetEvilBit(evilBit);
    
    // Check for valid header -> mining magic values
    if ( page.CapturePattern != "OggS" || page.Version != 0)
    {
        Warning( "File is not a valid ogg file. Template stopped." );
        return -1;
    }

    // check for valid HeaderType -> mining magic values
    if (( currpage == 0 && (page.HeaderType != 1 || page.HeaderType != 2)) 
        || (currpage == MAXPAGES && page.HeaderType != 4)
        || (currpage != 0 && page.HeaderType != 2)
        ) {
        Warning( "Headertype is not matching" );
        return -1;
    }

  currpage++;
}

 ---------- console-output ---------- 
 ---> IF SegmentLen[i] = 10; IS USED IN THE LOOP 
 1) 
 - 
 |  ./ffcompile templates/ogg.bt ogg.cpp
 | Finished creating cpp generator.
 | 
 | Mined interesting values:
 | 
 | CapturePattern: ['"OggS"']
 | HeaderType: ['1', '2', '4', '2']
 | Version: ['0']
 | 
 | File stat functions found:
 | 
 | FEof
 | 
 | g++ -std=c++17 -DHAVE_CONFIG_H -I.     -g -O3 -Wall -MT ogg.o -MD -MP -MF .deps/ogg.Tpo -c -o ogg.o ogg.cpp
 | mv -f .deps/ogg.Tpo .deps/ogg.Po
 | g++ -std=c++17  -g -O3 -Wall   -o ogg-fuzzer ogg.o fuzzer.o -lz
 | rm ogg.o
 â€“
 
 2)
 -
 | LENGTH: 20
 | Segment 6 too long (106)
 | Segment 7 too long (103)
 | Segment 8 too long (113)
 | Segment 10 too long (112)
 | Segment 15 too long (113)
 | Segment 19 too long (127)
 | Error: Array length too large
 | ogg-fuzzer: iterationchange.ogg failed
 -

---> IF SegmentLen[i] = {2,5,10,15,20,25,30,35,40,45,50}; IS USED IN THE LOOP
 1) 
 -
 |  ./ffcompile templates/ogg.bt ogg.cpp
 | Traceback (most recent call last):
 |   File "./ffcompile", line 16, in <module>
 |     dom = pfp.parse(data="", template_file=sys.argv[1])
 |   File "/home/eric/Thesis/FormatFuzzer/pfp/__init__.py", line 87, in parse
 |     dom = interp.parse(
 |   File "/home/eric/Thesis/FormatFuzzer/pfp/interp.py", line 1279, in parse
 |     self._ast = self._parse_string(template, predefines)
 |   File "/home/eric/Thesis/FormatFuzzer/pfp/interp.py", line 1434, in _parse_string
 |     res = py010parser.parse_string(
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/__init__.py", line 133, in parse_string
 |     return parser.parse(
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/c_parser.py", line 177, in parse
 |     res = self.cparser.parse(
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/ply/yacc.py", line 265, in parse
 |     return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/ply/yacc.py", line 1047, in parseopt_notrack
 |     tok = self.errorfunc(errtoken)
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/c_parser.py", line 1971, in p_error
 |     self._parse_error(
 |   File "/home/eric/.local/lib/python3.8/site-packages/py010parser/plyparser.py", line 54, in _parse_error
 |     raise ParseError("%s: %s" % (coord, msg))
 | py010parser.plyparser.ParseError: /tmp/tmp5__y6_8m:41:29: before: {
 -
	
 ---------- generated file behaviour ----------
 EXPECTED: the Segments with too large length should all have the lenght 10 (or one from the options)
 ACTUAL: stop at the generation of segment 2 with the length 232, because the operation in the for-loop hasn't changed the value
